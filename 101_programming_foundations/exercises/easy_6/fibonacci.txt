Fibonacci Number Location By Length

The Fibonacci series is a series of numbers (1, 1, 2, 3, 5, 8, 13, 21, ...) 
such that the first 2 numbers are 1 by definition, and each subsequent number 
is the sum of the two previous numbers. This series appears throughout the 
natural world.

Computationally, the Fibonacci series is a very simple series, but the results
grow at an incredibly rapid rate. For example, the 100th Fibonacci number is 
354,224,848,179,261,915,075 -- that's enormous, especially considering that 
it takes 6 iterations before it generates the first 2 digit number.

Write a method that calculates and returns the index of the first Fibonacci 
number that has the number of digits specified as an argument. 
(The first Fibonacci number has index 1.)

Examples:

find_fibonacci_index_by_length(2) == 7
find_fibonacci_index_by_length(10) == 45
find_fibonacci_index_by_length(100) == 476
find_fibonacci_index_by_length(1000) == 4782
find_fibonacci_index_by_length(10000) == 47847

You may assume that the argument is always greater than or equal to 2.

Understand the problem:
  create a method that takes a number as an argument
  the number is how many digits are in the fibonacci sequence
  the return should be at what index that occurs

Input:
  integer of 2 or greater

Output:
  the index where the fibonacci number has that many digits

Logic:
  make a loop with a counter starting at 1
  loop so that you go through the fibonacci sequence
    previous number = 0
    current number = 1
      check
  check how many digits are in the current number at each loop
  if the number has the same number of digits as the parameter
    return the current number
  else
    next number = previous number + current number
    previous number = current number
    current number = next number