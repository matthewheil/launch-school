You have a bank of switches before you, numbered from 1 to n. Each switch is 
connected to exactly one light that is initially off. You walk down the row of 
switches and toggle every one of them. You go back to the beginning, and on this 
second pass, you toggle switches 2, 4, 6, and so on. On the third pass, you go 
back again to the beginning and toggle switches 3, 6, 9, and so on. You repeat 
this process and keep going until you have been through n repetitions.

Write a method that takes one argument, the total number of switches, and
returns an Array that identifies which lights are on after n repetitions.

Example with n = 5 lights:

round 1: every light is turned on
round 2: lights 2 and 4 are now off; 1, 3, 5 are on
round 3: lights 2, 3, and 4 are now off; 1 and 5 are on
round 4: lights 2 and 3 are now off; 1, 4, and 5 are on
round 5: lights 2, 3, and 5 are now off; 1 and 4 are on
The result is that 2 lights are left on, lights 1 and 4. The return value is [1, 4].

With 10 lights, 3 lights are left on: lights 1, 4, and 9. The return value is [1, 4, 9].

understand the problem:
  create a method that takes a number as an argument
  each number represents a switch that is initialy off
    do n passes where n is the given number
     do mod 1..n for each number in n and flip the switch if == 0
  return an array of the switch numbers that are on
  
logic:
  make a way to represent the lights state
    a hash where the key is the light number and the value is the state
    an array that has a sub array for each light [light #, state]
  create a new empty hash for the lights
  iterate from 1 to the given number and set lights[num] = false to initialize the state of lights
  set count = 1
  iterate through lights.keys |num|
    if num % count == 0
      lights[num] = !lights[num]
  return lights.select { |_, v| v == true }.keys
    