If you take a number like 735291, and rotate it to the left, you get 352917. 
If you now keep the first digit fixed in place, and rotate the remaining digits,
you get 329175. Keep the first 2 digits fixed in place and rotate again to 
321759. Keep the first 3 digits fixed in place and rotate again to get 321597. 
Finally, keep the first 4 digits fixed in place and rotate the final 2 digits 
to get 321579. The resulting number is called the maximum rotation of the 
original number.

Write a method that takes an integer as argument, and returns the maximum 
rotation of that argument. You can (and probably should) use the 
rotate_rightmost_digits method from the previous exercise.

Example:

max_rotation(735291) == 321579
max_rotation(3) == 3
max_rotation(35) == 53
max_rotation(105) == 15 # the leading zero gets dropped
max_rotation(8_703_529_146) == 7_321_609_845

Understand the problem:
  define a method that takes a number as an argument
  perform the maximum rotation on the number
    the first rotation is using (number.to_s.size) - 1 for the last_n
    the second rotation is using (number.to_s.size) - 2 for the last n
    ...
    the last rotation is using (number.to_s.size) - n where n is (size - 2)
  return the max rotated number  
  use the rotate_rightmost_digits method from the previous exercise

Logic:
  count = 0
  size = number.to_s.size
  num = given_num
  loop
    last_n = size - count
    num = call rotate_rightmost_digits(num, last_n)
    break if count >= size - 2
    count += 1
  return num
